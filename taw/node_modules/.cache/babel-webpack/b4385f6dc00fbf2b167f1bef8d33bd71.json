{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let UserHttpService = /*#__PURE__*/(() => {\n  class UserHttpService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.token = '';\n      this.url = 'http://localhost:8080'; //TODO cambiare indirizzo\n\n      this.subjectName = new Subject();\n      this.subjBadge = new Subject(); // public userRole: string = ''\n\n      this.img = '';\n      this.mail = '';\n      this.rememberToken = false;\n      this.friendGame = false;\n      console.log(\"User service instantiated\");\n      this.token = localStorage.getItem('app_token') || '';\n\n      if (this.token.length < 1) {\n        console.log(\"No token found in local storage\"); // this.router.navigate(['login'])\n\n        this.send_update(\"No token found in local storage\");\n      } else {\n        this.updateUserInfo();\n        console.log(\"JWT loaded from local storage\");\n      }\n    }\n\n    send_update(message) {\n      this.subjectName.next({\n        text: message\n      });\n    }\n\n    get_update() {\n      return this.subjectName.asObservable();\n    }\n\n    update_badge(message) {\n      console.log(\"Badge Update\");\n      this.subjBadge.next({\n        text: message\n      });\n    }\n\n    get_badge() {\n      return this.subjBadge.asObservable();\n    }\n\n    updateUserInfo() {\n      this.get_user().subscribe(u => {\n        this.mail = u.mail;\n        this.img = u.avatarImgURL; // this.userRole = u.role\n\n        this.send_update(\"Update user\");\n      });\n    }\n\n    updateToken(payload) {\n      if (this.rememberToken) {\n        localStorage.setItem('app_token', payload);\n      } else {\n        sessionStorage.setItem('app_token', payload);\n      }\n\n      this.token = payload;\n\n      if (payload == '') {\n        this.rememberToken ? localStorage.clear() : sessionStorage.clear();\n      }\n    }\n\n    login(username, password, remember) {\n      console.log(`Login: ${username} ${password}`);\n      const basicAuth = btoa(`${username}:${password}`);\n      const options = {\n        headers: new HttpHeaders({\n          authorization: `Basic: ${basicAuth}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        })\n      };\n      return this.http.get(`${this.url}/login`, options).pipe(tap(data => {\n        this.token = data.token;\n        this.rememberToken = remember;\n        this.updateToken(this.token);\n        this.updateUserInfo();\n      }));\n    }\n\n    getRankingstory() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.get(`${this.url}/rankingstory`, options);\n    }\n\n    getFriendRankingHistory(friend) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.get(`${this.url}/rankingstory/${friend}`, options);\n    }\n\n    signin(username, password, name, surname, mail, avatarImgURL) {\n      console.log(`Creation of user ${username}`);\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      const body = {\n        username: username,\n        password: password,\n        name: name,\n        surname: surname,\n        mail: mail,\n        avatarImgURL: avatarImgURL\n      };\n      return this.http.post(`${this.url}/users`, body, options);\n    }\n\n    updateUser(name, surname, mail, img, password, oldpassword) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        username: this.get_username(),\n        name: name,\n        surname: surname,\n        mail: mail,\n        avatarImgURL: img,\n        password: password,\n        oldpassword: oldpassword\n      };\n      return this.http.put(`${this.url}/users`, body, options);\n    }\n\n    logout() {\n      console.log(\"Logging out\");\n      this.token = '';\n      this.img = '';\n      this.mail = '';\n      this.updateToken(this.token);\n      this.send_update(\"User logged out\");\n    }\n\n    whoami() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      let response;\n\n      try {\n        return response = this.http.get(`${this.url}/whoami`, options);\n      } catch (error) {\n        console.log(error);\n      }\n\n      return response;\n    }\n\n    get_token() {\n      return this.token;\n    }\n\n    get_username() {\n      return jwt_decode(this.token).username;\n    }\n\n    get_avatarImgURL() {\n      return this.img;\n    }\n\n    get_mail() {\n      return this.mail;\n    }\n\n    get_role() {\n      return jwt_decode(this.token).roles;\n    }\n\n    get_user() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.get(`${this.url}/users/${this.get_username()}`, options);\n    }\n\n    get_friend(friend) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.get(`${this.url}/users/${friend}`, options);\n    }\n\n    get_friendlist() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.get(`${this.url}/friend`, options);\n    }\n\n    get_notification(makeNotificationRead, inpending) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      /*\n      const query = {\n      inpending: inpending,\n      makeNotificationRea: makeNotificationRea,\n      }*/\n\n      if (inpending != undefined) {\n        return this.http.get(`${this.url}/notification?inpending=${inpending}&makeNotificationRead=${makeNotificationRead}`, options);\n      } else {\n        return this.http.get(`${this.url}/notification?makeNotificationRead=${makeNotificationRead}`, options);\n      }\n    }\n\n    add_friendRequest(receiver) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        type: \"friendRequest\",\n        receiver: receiver\n      };\n      return this.http.post(`${this.url}/notification`, body, options);\n    }\n\n    create_matchmaking() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        type: \"randomMatchmaking\"\n      };\n      return this.http.post(`${this.url}/game`, body, options);\n    }\n\n    create_friendlymatchmaking(username) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        type: \"friendlyMatchmaking\",\n        oppositePlayer: username\n      };\n      return this.http.post(`${this.url}/game`, body, options);\n    }\n\n    block_unblock_friend(username, block) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        username: username,\n        isBlocked: block\n      };\n      return this.http.put(`${this.url}/friend`, body, options);\n    }\n\n    has_moderator_role() {\n      // return this.userRole === 'MODERATOR'\n      return this.get_role() === 'MODERATOR';\n    }\n\n    has_nonregmod_role() {\n      // return this.userRole === 'NONREGMOD'\n      return this.get_role() === 'NONREGMOD';\n    }\n\n    create_new_mod(username, password) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        username: username,\n        password: password\n      };\n      return this.http.post(`${this.url}/users/mod`, body, options);\n    }\n\n    delete_user(username) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.delete(`${this.url}/users/${username}`, options);\n    }\n\n    add_friend(sender, accepted) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        sender: sender,\n        accepted: accepted\n      };\n      return this.http.put(`${this.url}/notification`, body, options);\n    }\n\n    delete_friend(username) {\n      console.log(\"Friend 2: \" + username);\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.delete(`${this.url}/friend/${username}`, options);\n    }\n\n    get_userlist() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.get(`${this.url}/users`, options);\n    }\n\n    makemove(col) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        move: String(col)\n      };\n      return this.http.post(`${this.url}/move`, body, options);\n    }\n\n    sendMessage(text) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        player: this.get_username(),\n        message: text\n      };\n      return this.http.post(`${this.url}/gameMessage`, body, options);\n    }\n\n    sendMessageSpect(text, player) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        player: player,\n        message: text\n      };\n      return this.http.post(`${this.url}/gameMessage`, body, options);\n    }\n\n    get_userMessage(isAModMessage) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.get(`${this.url}/message?ModMessage=${isAModMessage}`, options);\n    }\n\n    send_chatMsg(receiver, message) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        receiver: receiver,\n        message: message\n      };\n      return this.http.post(`${this.url}/message`, body, options);\n    }\n\n    send_ModMsg(receiver, message) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        receiver: receiver,\n        message: message\n      };\n      return this.http.post(`${this.url}/message/mod`, body, options);\n    }\n\n    readMessage(receiver, sender, modMessage) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        username: receiver,\n        sender: sender,\n        modMessage: modMessage\n      };\n      return this.http.put(`${this.url}/message`, body, options);\n    }\n\n    get_usersOnline() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.get(`${this.url}/users/online`, options);\n    }\n\n    get_Otheruser(username) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.get(`${this.url}/users/${username}`, options);\n    } // send friend game request\n\n\n    gamefriend(friend) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      const body = {\n        type: \"friendlyMatchmaking\",\n        oppositePlayer: friend\n      };\n      return this.http.post(`${this.url}/game`, body, options);\n    } //accept friend game\n\n\n    acceptFriendgame(friend, accept) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      console.log(accept);\n      const body = {\n        sender: friend,\n        accept: accept\n      };\n      return this.http.put(`${this.url}/game`, body, options);\n    }\n\n    delete_match() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      return this.http.delete(`${this.url}/game`, options);\n    }\n\n    get_GameinProgress() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.get(`${this.url}/game`, options);\n    } // send friend game request\n\n\n    watchPeople(friend) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      console.log(\"you are trying to watch: \" + friend);\n      const body = {\n        type: \"watchGame\",\n        player: friend\n      };\n      return this.http.post(`${this.url}/game`, body, options);\n    } // create a game against CPU\n\n\n    createCPUgame() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      console.log(this.lv);\n      const body = {};\n      return this.http.post(`${this.url}/game/cpu`, body, options);\n    } // make move against CPU\n\n\n    moveCPUgame(move) {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`\n        })\n      };\n      console.log(\"questo è il tuo lv: \", this.lv);\n      const body = {\n        move: move,\n        difficulty: this.lv\n      };\n      return this.http.post(`${this.url}/move/cpu`, body, options);\n    } // ask for suggestion\n\n\n    askSuggestion() {\n      const options = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.get_token()}`,\n          'cache-control': 'no-cache',\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.get(`${this.url}/move`, options);\n    }\n\n  }\n\n  UserHttpService.ɵfac = function UserHttpService_Factory(t) {\n    return new (t || UserHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  UserHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserHttpService,\n    factory: UserHttpService.ɵfac\n  });\n  return UserHttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}