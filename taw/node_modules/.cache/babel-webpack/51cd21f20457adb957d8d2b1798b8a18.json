{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../user-http.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../socketio.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/badge\";\n\nfunction AllUserComponent_li_8_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AllUserComponent_li_8_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const user_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.delete(user_r2.username);\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"close\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return {\n    \"color\": \"white\"\n  };\n};\n\nfunction AllUserComponent_li_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 9);\n    i0.ɵɵtemplate(3, AllUserComponent_li_8_button_3_Template, 4, 0, \"button\", 10);\n    i0.ɵɵelementStart(4, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function AllUserComponent_li_8_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const user_r2 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      ctx_r7.readMessage(ctx_r7.myUsername, user_r2.username);\n      ctx_r7.getInpendinMsg();\n      return ctx_r7.navigate(\"mod-chat/\" + user_r2.username + \"\");\n    });\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵelementStart(6, \"mat-icon\", 12);\n    i0.ɵɵtext(7, \"chat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function AllUserComponent_li_8_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const user_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.navigate(\"user-stats/\" + user_r2.username + \"\");\n    });\n    i0.ɵɵelementStart(9, \"span\");\n    i0.ɵɵelementStart(10, \"mat-icon\");\n    i0.ɵɵtext(11, \"equalizer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const user_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", user_r2.username, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", user_r2.roles != \"MODERATOR\" || user_r2.username == ctx_r0.myUsername);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"matBadge\", user_r2.badgeNum)(\"matBadgeHidden\", user_r2.badgeHidden)(\"ngStyle\", i0.ɵɵpureFunction0(5, _c0));\n  }\n}\n\nfunction AllUserComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error, \" \");\n  }\n}\n\nexport let AllUserComponent = /*#__PURE__*/(() => {\n  class AllUserComponent {\n    constructor(us, router, sio) {\n      this.us = us;\n      this.router = router;\n      this.sio = sio;\n      this.badgeAllUs = 0;\n      this.hideBadgeAll = false;\n      this.userList = [];\n      this.badgeContent = 0;\n      this.badgeContentMsg = 0;\n      this.hideMatBadge = false;\n      this.hideMatBadgeMsg = false;\n    }\n\n    ngOnInit() {\n      if (!this.us.get_token() || !this.us.has_moderator_role()) {\n        // TODO aggiungi un messaggio, magari con una funzione nel servizio per non replicare codice\n        this.router.navigate(['/']);\n      }\n\n      this.getInpendinMsg();\n      this.get_userlist();\n      this.us.get_username();\n      this.notifyNewMsg();\n    }\n\n    delete(username) {\n      this.us.delete_user(username).subscribe(e => {\n        this.error = \"User deleted successfully\";\n        this.us.get_userlist().subscribe(elem => {\n          this.list = elem.userlist;\n        });\n      }, () => {\n        this.error = \"Something weird happended\";\n      });\n    }\n\n    get_userlist() {\n      this.subscriptionIn = this.us.get_userMessage(true).subscribe(elem => {\n        this.messageInpending = elem.inPendingMessages;\n        this.us.get_userlist().subscribe(elem => {\n          this.list = elem.userlist;\n          console.log(this.list);\n          this.list.forEach(element => {\n            let countMsg = 0;\n            let msgHide = true;\n            this.messageInpending.forEach(msg => {\n              if (msg.sender == element['username']) {\n                //date.getUTCDay().toString()+\"-\"+date.getUTCMonth().toString()+\"-\"+date.getFullYear().toString()+\" \"+date.getUTCHours().toString()+\":\"+date.getUTCMinutes().toString()\n                countMsg++; //console.log(this.num)\n              }\n            });\n\n            if (countMsg != 0) {\n              msgHide = false;\n            }\n\n            if (element['username'] != this.us.get_username()) {\n              this.userList.push({\n                id: element['_id'],\n                username: element['username'],\n                roles: element['roles'],\n                badgeNum: countMsg,\n                badgeHidden: msgHide\n                /*color: col */\n\n              });\n            }\n          });\n        });\n        console.log(this.userList);\n      });\n    }\n\n    navigate(route) {\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n      this.router.onSameUrlNavigation = \"reload\";\n      this.router.navigate([route]);\n    }\n\n    readMessage(myus, username) {\n      this.us.readMessage(myus, username, true).subscribe();\n    }\n\n    getInpendinMsg() {\n      this.subscriptionIn = this.us.get_userMessage(true).subscribe(elem => {\n        console.log(\"InpendingMsg:\");\n        console.log(elem.inPendingMessages);\n        this.badgeAllUs = 0;\n        this.messageInpending = elem.inPendingMessages;\n        this.messageInpending.forEach(element => {\n          if (element.receiver == this.us.get_username()) {\n            this.badgeAllUs++;\n          }\n        });\n        console.log(\"badge\");\n        console.log(this.badgeAllUs);\n\n        if (this.badgeAllUs == 0) {\n          this.hideBadgeAll = true;\n        } else {\n          this.hideBadgeAll = false;\n        }\n      });\n    }\n\n    notifyNewMsg() {\n      if (!this.sio.isNull()) {\n        //let g = this.router.parseUrl(this.router.url).root.children.primary.segments[0].path\n        //if (g) {\n        this.subscriptionMsg = this.sio.newMessage().subscribe(msg => {\n          let g = this.router.parseUrl(this.router.url).root.children.primary.segments[0].path;\n          let g1 = \"\";\n\n          if (this.router.parseUrl(this.router.url).root.children.primary.segments[1] != undefined) {\n            g1 = this.router.parseUrl(this.router.url).root.children.primary.segments[1].path;\n          } //console.log(\"NotifyNewMsg\")\n\n\n          console.log(g1);\n          let rec = JSON.parse(JSON.stringify(msg)).receiver;\n          let send = JSON.parse(JSON.stringify(msg)).sender;\n          let inpend = JSON.parse(JSON.stringify(msg)).inpending; // if (\"friend-chat\" != g || g1 != send) {\n          //console.log(\"NotifyNewMsg\")\n\n          if (inpend) {\n            this.getInpendinMsg();\n          } //console.log(g)\n          //console.log(inpend)\n\n\n          this.userList.forEach(element => {\n            if (inpend) {\n              if (element['username'] == send) {\n                element['badgeNum']++;\n              }\n\n              if (element['badgeNum'] != 0) {\n                element['badgeHidden'] = false;\n              } else {\n                element['badgeHidden'] = true;\n              }\n            }\n          }); // }\n        }); // }\n      }\n    }\n\n  }\n\n  AllUserComponent.ɵfac = function AllUserComponent_Factory(t) {\n    return new (t || AllUserComponent)(i0.ɵɵdirectiveInject(i1.UserHttpService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.SocketioService));\n  };\n\n  AllUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AllUserComponent,\n    selectors: [[\"app-all-user\"]],\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"text-center\", \"myContainer\", \"p-0\"], [1, \"homepagecontainer\"], [\"src\", \"assets/img/logo.png\", \"alt\", \"Forza quattro logo\", \"width\", \"72\", \"height\", \"57\", 1, \"mb-4\"], [1, \"h3\", \"mb-3\", \"fw-normal\"], [\"tabindex\", \"0\", 1, \"scrollable\"], [1, \"list-group\"], [\"class\", \"list-group-item d-flex justify-content-between align-items-center\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-primary mt-1\", 4, \"ngIf\"], [1, \"list-group-item\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"align-items-right\"], [\"type\", \"button\", \"class\", \"friendListBtn mr-6\", \"id\", \"btnDel\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"friendListBtn\", \"mr-6\", 3, \"click\"], [\"matBadgeColor\", \"accent\", \"matBadgeSize\", \"small\", \"matBadgePosition\", \"above after\", \"matBadgeOverlap\", \"true\", 3, \"matBadge\", \"matBadgeHidden\", \"ngStyle\"], [\"type\", \"button\", 1, \"friendListBtn\", \"mr-2\", 3, \"click\"], [\"type\", \"button\", \"id\", \"btnDel\", 1, \"friendListBtn\", \"mr-6\", 3, \"click\"], [1, \"alert\", \"alert-primary\", \"mt-1\"]],\n    template: function AllUserComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"img\", 2);\n        i0.ɵɵelementStart(3, \"h1\", 3);\n        i0.ɵɵtext(4, \"Moderator dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"ul\", 5);\n        i0.ɵɵtemplate(8, AllUserComponent_li_8_Template, 12, 6, \"li\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, AllUserComponent_div_9_Template, 2, 1, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.userList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    directives: [i4.NgForOf, i4.NgIf, i5.MatIcon, i6.MatBadge, i4.NgStyle],\n    styles: [\".myContainer[_ngcontent-%COMP%]{height:100vh;display:flex;align-items:center;padding-top:40px;padding-bottom:40px;background-color:#f5f5f5}.homepagecontainer[_ngcontent-%COMP%]{width:100%;max-width:550px;padding:15px;margin:auto}.scrollable[_ngcontent-%COMP%]{overflow-y:auto;height:65vh;max-height:75vh}.mat-icon[_ngcontent-%COMP%]{vertical-align:bottom;font-size:20px}.friendListBtn[_ngcontent-%COMP%]{outline:none;cursor:pointer;border:none;padding:.5vh .6vw;margin:0 0 0 .4rem;font-family:inherit;font-size:inherit;position:relative;display:inline-block;letter-spacing:.05rem;font-weight:700;font-size:17px;border-radius:300px;overflow:hidden;background:#59C9A5;color:#f8f8ff}.friendListBtn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]   .mat-badge-content[_ngcontent-%COMP%]{transform:translate(-4px,16px)!important}#btnDel[_ngcontent-%COMP%]{background:red}#btnBlock[_ngcontent-%COMP%]{background:#E59500}#reqButton[_ngcontent-%COMP%]{position:relative;left:34%;right:34%;top:3%}.friendListBtn[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{position:relative;z-index:10;transition:color .4s}.friendListBtn[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{color:#fff}.friendListBtn[_ngcontent-%COMP%]:before, .friendListBtn[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;width:10vw;height:10vh;z-index:0}.friendListBtn[_ngcontent-%COMP%]:before{content:\\\"\\\";background:#212529;width:12vw;left:-10%;transform:skew(30deg);transition:transform .4s cubic-bezier(.3,1,.8,1)}.friendListBtn[_ngcontent-%COMP%]:hover:before{transform:translate(100%)}.dot[_ngcontent-%COMP%]{height:25px;width:25px;background-color:#bbb;border-radius:50%;display:inline-block}\"]\n  });\n  return AllUserComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}