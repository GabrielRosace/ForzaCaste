{"ast":null,"code":"import _asyncToGenerator from \"/home/node/app/taw/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../app.component\";\nimport * as i2 from \"../_services/toast.service\";\nimport * as i3 from \"../socketio.service\";\nimport * as i4 from \"../user-http.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/badge\";\n\nconst _c0 = function () {\n  return {\n    \"color\": \"white\"\n  };\n};\n\nfunction SidebarComponent_li_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵelementStart(1, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_18_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.getNotification(true, undefined);\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 47);\n    i0.ɵɵtext(3, \"notifications \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 48);\n    i0.ɵɵtext(5, \" Notification\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matBadge\", ctx_r0.badgeContent)(\"matBadgeHidden\", ctx_r0.hideMatBadge)(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n  }\n}\n\nfunction SidebarComponent_li_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵelementStart(1, \"button\", 49);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_19_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.getModeratorList();\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 47);\n    i0.ɵɵtext(3, \"chat \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 48);\n    i0.ɵɵtext(5, \" Moderator sms\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matBadge\", ctx_r1.badgeContMod)(\"matBadgeHidden\", ctx_r1.hideBadgeMod)(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n  }\n}\n\nfunction SidebarComponent_li_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵelementStart(1, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_20_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.navigate(\"new-mod\");\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 13);\n    i0.ɵɵtext(3, \"person_add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Add new mod \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\n\nfunction SidebarComponent_li_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵelementStart(1, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_21_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.navigate(\"all-user\");\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 47);\n    i0.ɵɵtext(3, \"people \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 48);\n    i0.ɵɵtext(5, \" All User\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matBadge\", ctx_r3.badgeAllUs)(\"matBadgeHidden\", ctx_r3.hideBadgeAll)(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n  }\n}\n\nfunction SidebarComponent_li_32_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_32_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const lnotification_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.addFriendToFriendlist(lnotification_r20.sender, true);\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"done_outline\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SidebarComponent_li_32_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 56);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_32_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const lnotification_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.addFriendToFriendlist(lnotification_r20.sender, false);\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"not_interested\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SidebarComponent_li_32_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_32_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r33);\n      const lnotification_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.acceptGamerequest(lnotification_r20.sender);\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"done_outline\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SidebarComponent_li_32_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 56);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_32_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r36);\n      const lnotification_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.denyGamerequest(lnotification_r20.sender);\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"not_interested\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SidebarComponent_li_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 52);\n    i0.ɵɵtemplate(3, SidebarComponent_li_32_button_3_Template, 4, 0, \"button\", 53);\n    i0.ɵɵtemplate(4, SidebarComponent_li_32_button_4_Template, 4, 0, \"button\", 54);\n    i0.ɵɵtemplate(5, SidebarComponent_li_32_button_5_Template, 4, 0, \"button\", 53);\n    i0.ɵɵtemplate(6, SidebarComponent_li_32_button_6_Template, 4, 0, \"button\", 54);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const lnotification_r20 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", lnotification_r20.msg, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", lnotification_r20.type == \"friendRequest\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", lnotification_r20.type == \"friendRequest\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", lnotification_r20.type == \"friendlyMatchmaking\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", lnotification_r20.type == \"friendlyMatchmaking\");\n  }\n}\n\nfunction SidebarComponent_li_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r39 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 52);\n    i0.ɵɵelementStart(3, \"button\", 57);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_45_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r39);\n      const mod_r37 = restoredCtx.$implicit;\n      const ctx_r38 = i0.ɵɵnextContext();\n      ctx_r38.readMessage(ctx_r38.username, mod_r37.username, true);\n      ctx_r38.getInpendingMsgMod();\n      return ctx_r38.navigate(\"mod-chat/\" + mod_r37.username + \"\");\n    });\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵelementStart(5, \"mat-icon\", 58);\n    i0.ɵɵtext(6, \"chat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const mod_r37 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", mod_r37.username, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matBadge\", mod_r37.badgeNum)(\"matBadgeHidden\", mod_r37.badgeHidden)(\"ngStyle\", i0.ɵɵpureFunction0(4, _c0));\n  }\n}\n\nfunction SidebarComponent_div_49_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 66);\n  }\n\n  if (rf & 2) {\n    const ctx_r40 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r40.avatarImgURL, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction SidebarComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r42 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 59);\n    i0.ɵɵelementStart(1, \"a\", 60);\n    i0.ɵɵtemplate(2, SidebarComponent_div_49_img_2_Template, 1, 1, \"img\", 61);\n    i0.ɵɵelementStart(3, \"strong\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\", 62);\n    i0.ɵɵelementStart(6, \"li\");\n    i0.ɵɵelementStart(7, \"button\", 63);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_div_49_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return ctx_r41.navigate(\"profile\");\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\", 64);\n    i0.ɵɵtext(9, \"account_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \" Profile\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"li\");\n    i0.ɵɵelement(12, \"hr\", 65);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"li\");\n    i0.ɵɵelementStart(14, \"button\", 63);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_div_49_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return ctx_r43.navigate(\"logout\");\n    });\n    i0.ɵɵelementStart(15, \"mat-icon\");\n    i0.ɵɵtext(16, \"exit_to_app\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \" Sign out\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.has_nonregmod_role());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.username);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n  }\n}\n\nfunction SidebarComponent_button_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 67);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_button_50_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r45);\n      const ctx_r44 = i0.ɵɵnextContext();\n      return ctx_r44.getFriendlist();\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 68);\n    i0.ɵɵtext(2, \"notifications \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"FriendList\\n\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matBadge\", ctx_r7.badgeContentMsg)(\"matBadgeHidden\", ctx_r7.hideMatBadgeMsg)(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction SidebarComponent_li_58_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 52);\n    i0.ɵɵelementStart(3, \"button\", 69);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_58_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r48);\n      const lfriend_r46 = restoredCtx.$implicit;\n      const ctx_r47 = i0.ɵɵnextContext();\n      return ctx_r47.deleteFriend(lfriend_r46.username);\n    });\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"close\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 70);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_58_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r48);\n      const lfriend_r46 = restoredCtx.$implicit;\n      const ctx_r49 = i0.ɵɵnextContext();\n      ctx_r49.readMessage(ctx_r49.username, lfriend_r46.username, false);\n      ctx_r49.getInpendinMsg();\n      return ctx_r49.navigate(\"friend-chat/\" + lfriend_r46.username + \"\");\n    });\n    i0.ɵɵelementStart(8, \"span\");\n    i0.ɵɵelementStart(9, \"mat-icon\", 58);\n    i0.ɵɵtext(10, \"chat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 71);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_58_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r48);\n      const lfriend_r46 = restoredCtx.$implicit;\n      const ctx_r50 = i0.ɵɵnextContext();\n      return ctx_r50.navigate(\"user-stats/\" + lfriend_r46.username + \"\");\n    });\n    i0.ɵɵelementStart(12, \"span\");\n    i0.ɵɵelementStart(13, \"mat-icon\");\n    i0.ɵɵtext(14, \"equalizer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 72);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_58_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r48);\n      const lfriend_r46 = restoredCtx.$implicit;\n      const ctx_r51 = i0.ɵɵnextContext();\n      return ctx_r51.blockUnblock(lfriend_r46.username, lfriend_r46.isBlocked);\n    });\n    i0.ɵɵelementStart(16, \"span\");\n    i0.ɵɵelement(17, \"i\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"span\", 73);\n    i0.ɵɵelementStart(19, \"span\", 74);\n    i0.ɵɵtext(20, \"New alerts\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const lfriend_r46 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", lfriend_r46.username, \" \");\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"matBadge\", lfriend_r46.badgeNum)(\"matBadgeHidden\", lfriend_r46.badgeHidden)(\"ngStyle\", i0.ɵɵpureFunction0(8, _c0));\n    i0.ɵɵadvance(8);\n    i0.ɵɵclassMap(lfriend_r46.isBlocked);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(9, _c1, lfriend_r46.color));\n  }\n}\n\nfunction SidebarComponent_li_74_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r54 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 75);\n    i0.ɵɵlistener(\"click\", function SidebarComponent_li_74_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r54);\n      const user_r52 = restoredCtx.$implicit;\n      const ctx_r53 = i0.ɵɵnextContext();\n      return ctx_r53.setName(user_r52.username);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const user_r52 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(user_r52.username);\n  }\n}\n\nfunction SidebarComponent_div_77_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 76);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Send Request error: \", ctx_r11.errMsg, \" \");\n  }\n}\n\nexport let SidebarComponent = /*#__PURE__*/(() => {\n  class SidebarComponent {\n    constructor(app, toast, sio, us, router, activeRoute) {\n      this.app = app;\n      this.toast = toast;\n      this.sio = sio;\n      this.us = us;\n      this.router = router;\n      this.activeRoute = activeRoute;\n      this.username = \"\"; //TODO tipo user\n\n      this.avatarImgURL = \"\";\n      this.tok = \"\";\n      this.errMsg = \"\";\n      this.badgeContent = 0;\n      this.badgeContentMsg = 0;\n      this.hideMatBadge = false;\n      this.hideMatBadgeMsg = false;\n      this.badgeContMod = 0;\n      this.hideBadgeMod = false;\n      this.badgeAllUs = 0;\n      this.hideBadgeAll = false;\n      this.friendUsername = \"\";\n      this.modlist = []; //private subsctiptionNot: Subscription\n\n      this.role = \"\";\n      this.type = \"\";\n      this.friendlist = [];\n      this.notification = [];\n      this.msg = \"\";\n      this.btnVal = [];\n      this.subscriptionName = this.us.get_update().subscribe(msg => {\n        // Update username and icon of logged user\n        msg = msg.text;\n\n        if (msg == \"User logged out\") {\n          this.tok = '';\n          this.username = '';\n          this.avatarImgURL = '';\n        } else if (msg == \"User logged in\") {\n          this.tok = this.us.get_token();\n          this.notifyFriendReq();\n          this.notifyGameReq();\n          this.notifyFriendReqAccepted();\n          this.notifyFriendDeleted();\n          this.notifyNewMsg();\n          this.getNotification(false, true);\n          this.getInpendinMsg();\n          this.getInpendingMsgMod();\n          this.getFriendlist();\n          this.getUsOnline();\n          this.notifyOnline();\n          this.foundGame();\n          this.username = this.us.get_username();\n        } else if (msg == \"Update user\") {\n          this.avatarImgURL = this.us.get_avatarImgURL();\n          this.notifyGameReq();\n          this.notifyFriendReq();\n          this.notifyFriendDeleted();\n          this.notifyFriendReqAccepted();\n          this.notifyNewMsg();\n          this.notifyOnline();\n          this.foundGame(); //this.getNotification(false, true)\n        }\n      });\n      this.subscriptionChat = this.us.get_badge().subscribe(msg => {\n        console.log(\"Chat get_badge\");\n        msg = msg.text;\n\n        if (msg == \"read friend-chat\") {\n          this.getInpendinMsg();\n        } else if (msg == \"read mod-chat\") {\n          this.getInpendingMsgMod();\n        }\n      });\n      /*\n          this.us.get_friendlist().subscribe((u) => {\n            this.friendlist = []\n            console.log()\n            u.friendlist.forEach((element: { [x: string]: any; }) => {\n              console.log(1)\n              this.friendlist.push({ id: element['_id'], username: element['username'], isBlocked: element['isBlocked'] })\n              console.log(this.friendlist);\n            });\n            console.log(this.friendlist);\n          })*/\n\n      /*\n      this.subsctiptionNot =  this.us.get_notification().subscribe((u) => {\n        this.notification = []\n        console.log()\n        u.notification.forEach((element: { [x: string]: any; }) => {\n          console.log(1)\n          this.notification.push({ id: element['_id'], username: element['sender'], type: element['type'] })\n          console.log(this.notification);\n        });\n        console.log(this.notification);\n      })*/\n    }\n\n    ngOnInit() {\n      this.tok = this.us.get_token();\n\n      if (this.tok) {\n        this.username = this.us.get_username();\n        this.avatarImgURL = this.us.get_avatarImgURL();\n        this.role = this.us.get_role(); //this.getNotification(false, true)\n      } else {\n        this.username = '';\n        this.avatarImgURL = '';\n      }\n    }\n\n    ngOnDestroy() {\n      /* Delete the subscription from the socket's listener */\n      this.subscriptionName.unsubscribe();\n      this.subscriptionReq.unsubscribe();\n      this.subscriptionNot.unsubscribe();\n      this.subscriptionMsg.unsubscribe();\n      this.gameReady.unsubscribe();\n      this.subscriptionChat.unsubscribe();\n    }\n\n    setName(username) {\n      this.friendUsername = username;\n    }\n\n    setErr() {\n      this.errMsg = \"\";\n    }\n\n    get_userlist() {\n      this.us.get_userlist().subscribe(elem => {\n        console.log(elem);\n        this.list = elem.userlist.filter(u => {\n          return u.username != this.us.get_username();\n        });\n      });\n    }\n\n    has_moderator_role() {\n      if (this.tok) {\n        return this.us.has_moderator_role();\n      }\n\n      return false;\n    }\n\n    has_nonregmod_role() {\n      if (this.tok) {\n        return this.us.has_nonregmod_role();\n      }\n\n      return false;\n    }\n    /*\n      toastN(msg: string) {\n        this.toast.show(msg, {\n          classname: 'bg-info text-light',\n          delay: 3000,\n          autohide: true\n        });\n      }*/\n\n\n    getNotification(makeNotificationRead, inpending) {\n      this.subscriptionNot = this.us.get_notification(makeNotificationRead, inpending).subscribe(u => {\n        this.notification = []; //console.log(\"inpending: \"+inpending)\n\n        u.notification.forEach(element => {\n          //console.log(1)\n          if (!(element['type'] == 'randomMatchmaking') && !(element['type'] == 'friendMessage')) {\n            let msg;\n\n            if (element['type'] == 'friendlyMatchmaking') {\n              msg = \"New Friendly Matchmaking from \" + element['sender'];\n            } else if (element['type'] == 'friendRequest') {\n              msg = \"New Friend Request from \" + element['sender'];\n            }\n\n            this.notification.push({\n              id: element['_id'],\n              sender: element['sender'],\n              type: element['type'],\n              msg: msg\n            }); //console.log(this.notification);\n\n            if (inpending == true) {\n              this.badgeContent++;\n            }\n          }\n        });\n\n        if (makeNotificationRead) {\n          this.badgeContent = 0;\n        }\n\n        if (this.badgeContent != 0) {\n          this.hideMatBadge = false;\n        } else {\n          this.hideMatBadge = true;\n        } //console.log(this.notification);\n\n\n        console.log(\"badgeContent: \" + this.badgeContent);\n      });\n    }\n\n    isFriendReq(type) {\n      if (type == 'friendRequest') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    getFriendlist() {\n      console.log(\"GetFriendlist\"); //this.messageInpending = this.getInpendinMsg()\n\n      this.getInpendinMsg();\n      let g = this.router.url;\n      console.log(g); //console.log(this.messageInpending)\n\n      this.us.get_friendlist().subscribe(u => {\n        this.friendlist = [];\n        u.friendlist.forEach(element => {\n          let countMsg = 0;\n          let msgHide = true;\n          let col;\n          this.us.get_friend(element['username']).subscribe(friend => {\n            this.messageInpending.forEach(msg => {\n              if (msg.sender == element['username']) {\n                //date.getUTCDay().toString()+\"-\"+date.getUTCMonth().toString()+\"-\"+date.getFullYear().toString()+\" \"+date.getUTCHours().toString()+\":\"+date.getUTCMinutes().toString()\n                countMsg++; //console.log(this.num)\n              }\n            });\n            /*\n            let sos = this.onlineUser.filter((data: any) => {\n              if (data.username == friend.username) {\n                return true\n              } else {\n                return false\n              }\n            })*/\n            //console.log(this.onlineUser)\n\n            let sos = this.onlineUser.find(data => {\n              return data == element['username'];\n            }); //console.log(\"Sos\")\n            //console.log(sos)\n\n            if (sos == element['username']) {\n              col = \"#88D498\";\n            } else {\n              col = \"#A4A5AE\";\n            } //console.log(countMsg)\n\n\n            if (countMsg != 0) {\n              msgHide = false;\n            }\n\n            if (element['isBlocked']) {\n              this.friendlist.push({\n                id: element['_id'],\n                username: element['username'],\n                isBlocked: \"bi bi-person-check-fill\",\n                badgeNum: countMsg,\n                badgeHidden: msgHide,\n                color: col\n              });\n            } else {\n              this.friendlist.push({\n                id: element['_id'],\n                username: element['username'],\n                isBlocked: \"bi bi-person-x-fill\",\n                badgeNum: countMsg,\n                badgeHidden: msgHide,\n                color: col\n              });\n            }\n          });\n        });\n      });\n    }\n\n    getModeratorList() {\n      this.us.get_userlist().subscribe(elem => {\n        this.modlist = [];\n        this.list = elem.userlist;\n        console.log(this.list);\n        this.list.forEach(element => {\n          var countMsg = 0;\n          var msgHide = true;\n          this.messageInMod.forEach(msg => {\n            if (msg.sender == element['username']) {\n              //date.getUTCDay().toString()+\"-\"+date.getUTCMonth().toString()+\"-\"+date.getFullYear().toString()+\" \"+date.getUTCHours().toString()+\":\"+date.getUTCMinutes().toString()\n              countMsg++; //console.log(this.num)\n            }\n          });\n\n          if (countMsg != 0) {\n            msgHide = false;\n          }\n\n          if (element['roles'] == \"MODERATOR\") {\n            this.modlist.push({\n              id: element['_id'],\n              username: element['username'],\n              badgeNum: countMsg,\n              badgeHidden: msgHide\n              /*color: col */\n\n            });\n          }\n        });\n        console.log(this.modlist);\n      });\n    }\n\n    getUsOnline() {\n      let online = this.us.get_usersOnline().subscribe(elem => {\n        console.log(\"Online\");\n        console.log(elem.onlineuser);\n        this.onlineUser = elem.onlineuser;\n      });\n    } //Used to send a new friendRequest\n\n\n    addFriend(receiver, type) {\n      console.log(\"receiver: \", receiver);\n      this.errMsg = \"\";\n      this.us.add_friendRequest(receiver).subscribe(data => {\n        this.app.toastCust(\"Request Forwarded\"); //this.toastN(\"Request Forwarded\")\n      }, err => {\n        let msg = JSON.parse(JSON.stringify(err)).error;\n        console.log(`Login error: ${JSON.stringify(err)}`);\n        this.errMsg = msg[\"errormessage\"];\n      });\n    }\n\n    deleteFriend(friend) {\n      console.log(\"friend: \", friend);\n      this.us.delete_friend(friend).subscribe(data => {\n        this.app.toastCust(\"Friend deleted\"); //this.toastN(\"Friend deleted\")\n\n        this.getFriendlist();\n      });\n    }\n\n    notifyFriendReq() {\n      if (!this.sio.isNull()) {\n        this.subscriptionReq = this.sio.request().subscribe(msg => {\n          this.msg = JSON.parse(JSON.stringify(msg)).type;\n          let user = JSON.parse(JSON.stringify(msg)).sender;\n          console.log(JSON.parse(JSON.stringify(msg)).type); //console.log('got a msg: ' + msg);\n\n          if (msg) {\n            this.app.toastCust(\"New \" + this.msg + \" by \" + user); //this.toastN(\"New \" + this.msg + \" by \" + user)\n            //console.log('got a msg: ' + msg);\n          }\n\n          this.badgeContent = 0;\n          this.getNotification(false, true);\n          this.getNotification(false);\n        });\n      }\n    }\n\n    blockUnblock(username, block) {\n      let index = this.friendlist.findIndex(obj => obj.username == username);\n      console.log(this.friendlist[index]);\n\n      if (block == \"bi bi-person-check-fill\") {\n        this.us.block_unblock_friend(username, false).subscribe(data => {\n          //this.btnVal = \"Block\"\n          this.friendlist[index].isBlocked = \"bi bi-person-x-fill\";\n          this.app.toastCust(\"FRIEND UNBLOCKED\"); //this.toastN(\"FRIEND UNBLOCKED\")\n        });\n      } else if (block == \"bi bi-person-x-fill\") {\n        this.us.block_unblock_friend(username, true).subscribe(data => {\n          //his.btnVal = \"UnBlocked\"\n          this.friendlist[index].isBlocked = \"bi bi-person-check-fill\";\n          this.app.toastCust(\"FRIEND BLOCKED\"); //this.toastN(\"FRIEND BLOCKED\")\n        });\n      }\n    }\n\n    foundGame() {\n      /* Subscribe to a socket's listener, the lobby, for knwo if i find a match */\n      this.gameReady = this.sio.gameReady().subscribe(msg => {\n        console.log('got a msg lobby: ' + JSON.stringify(msg));\n\n        if (msg.gameReady) {\n          //rimuove il backdrop dei modal (bug di bootstrap)\n          this.sio.setP2(msg.opponentPlayer);\n          Array.from(document.getElementsByClassName('modal-backdrop')).forEach(item => {\n            var _a;\n\n            (_a = item.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(item);\n          });\n          this.router.navigate(['game']);\n        }\n\n        if (msg.gameReady != undefined && !msg.gameReady) {\n          //chiudere il modal\n          Array.from(document.getElementsByClassName('modal-backdrop')).forEach(item => {\n            var _a;\n\n            (_a = item.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(item);\n          });\n          this.app.toastCust(\"Friendly match refused\");\n        }\n      });\n    }\n\n    notifyGameReq() {\n      if (!this.sio.isNull()) {\n        this.subscriptionReq = this.sio.gameRequest().subscribe(msg => {\n          this.msg = JSON.parse(JSON.stringify(msg)).type;\n          let user = JSON.parse(JSON.stringify(msg)).player;\n          console.log(JSON.parse(JSON.stringify(msg)).type); //console.log('got a msg: ' + msg);\n\n          if (msg) {\n            this.app.toastCust(\"New \" + this.msg + \" by \" + user); //this.toastN(\"New \" + this.msg + \" by \" + user)\n            //console.log('got a msg: ' + msg);\n          }\n\n          this.badgeContent = 0;\n          this.getNotification(false, true);\n          this.getNotification(false);\n        });\n      }\n    }\n\n    notifyFriendReqAccepted() {\n      if (!this.sio.isNull()) {\n        this.subscriptionReq = this.sio.friendRequYN().subscribe(msg => {\n          //this.msg = JSON.parse(JSON.stringify(msg)).type\n          let user = JSON.parse(JSON.stringify(msg)).newFriend; //console.log(JSON.parse(JSON.stringify(msg)).type)\n\n          console.log('user: ' + user);\n\n          if (msg) {\n            if (user) {\n              this.app.toastCust(\"You are now friend with \" + user);\n            } else {\n              this.app.toastCust(\"Your friend request has been rejected\");\n            } //this.toastN(\"You are now friend with \" + user)\n            //console.log('got a msg: ' + msg);\n\n          }\n\n          this.getFriendlist();\n        });\n      }\n    }\n\n    notifyFriendDeleted() {\n      if (!this.sio.isNull()) {\n        this.subscriptionReq = this.sio.friendDeleted().subscribe(msg => {\n          this.msg = JSON.parse(JSON.stringify(msg)).deletedFriend; //let user = JSON.parse(JSON.stringify(msg)).newFriend\n          //console.log(JSON.parse(JSON.stringify(msg)).type)\n\n          console.log('msg Deleted Friend: ' + this.msg[0]);\n\n          if (msg) {\n            this.app.toastCust(\"The friend \" + this.msg + \" has removed you from the friendlist.\"); //this.toastN(\"The friend \" + this.msg + \" has removed you from the friendlist.\")\n            //console.log('got a msg: ' + msg);\n          }\n\n          this.getFriendlist();\n        });\n      }\n    } //Is used to add a new friend in the friendlist, when the friendRequest is accepted \n\n\n    addFriendToFriendlist(sender, accepted) {\n      console.log(\"sender: \", sender);\n      this.us.add_friend(sender, accepted).subscribe(data => {\n        this.app.toastCust(\"Request Accepted\"); //this.toastN(\"Request Accepted\")\n\n        this.getFriendlist();\n      });\n    } //Is used to add a new friend in the friendlist, when the friendRequest is accepted \n\n\n    acceptGamerequest(sender) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        console.log(\"sender: \", sender);\n\n        if (!_this.sio.isNull()) {\n          _this.us.friendGame = true;\n          yield _this.router.navigate(['/home']);\n\n          _this.us.acceptFriendgame(sender, true).subscribe(msg => {});\n        }\n      })();\n    }\n\n    denyGamerequest(sender) {\n      console.log(\"sender: \", sender);\n\n      if (!this.sio.isNull()) {\n        this.us.acceptFriendgame(sender, false).subscribe(msg => {});\n      }\n    }\n\n    getInpendinMsg() {\n      this.subscriptionIn = this.us.get_userMessage().subscribe(elem => {\n        console.log(\"InpendingMsg:\");\n        console.log(elem.inPendingMessages);\n        this.badgeContentMsg = 0;\n        this.messageInpending = elem.inPendingMessages;\n        this.messageInpending.forEach(element => {\n          if (element.receiver == this.us.get_username()) {\n            this.badgeContentMsg++;\n          }\n        });\n        console.log(\"badge\");\n        console.log(this.badgeContentMsg);\n\n        if (this.badgeContentMsg == 0) {\n          this.hideMatBadgeMsg = true;\n        } else {\n          this.hideMatBadgeMsg = false;\n        }\n        /*\n        console.log(\"GetInpending: \")\n        console.log(this.messageInpending)\n        this.us.get_friend(username).subscribe((friend) => {\n          this.messageInpending.forEach((element: any) => {\n            if (element.sender == username) {\n              //date.getUTCDay().toString()+\"-\"+date.getUTCMonth().toString()+\"-\"+date.getFullYear().toString()+\" \"+date.getUTCHours().toString()+\":\"+date.getUTCMinutes().toString()\n              console.log(\"Sono gabbriel\")\n              numb++\n              //console.log(this.num)\n            }\n          })\n        })*/\n\n      }); //return this.messageInpending\n    }\n\n    getInpendingMsgMod() {\n      this.subscriptionIn = this.us.get_userMessage(true).subscribe(elem => {\n        console.log(\"InpendingMsgMod:\");\n        console.log(elem.inPendingMessages);\n        this.badgeContMod = 0;\n        this.messageInMod = elem.inPendingMessages;\n        this.messageInMod.forEach(element => {\n          if (element.receiver == this.us.get_username()) {\n            this.badgeContMod++;\n          }\n        });\n        console.log(\"badgeMod\");\n        console.log(this.badgeContMod);\n\n        if (this.us.has_moderator_role()) {\n          this.badgeAllUs = this.badgeContMod;\n          this.badgeContMod = 0;\n        }\n\n        if (this.badgeAllUs == 0) {\n          this.hideBadgeAll = true;\n        } else {\n          this.hideBadgeAll = false;\n        }\n\n        if (this.badgeContMod == 0) {\n          this.hideBadgeMod = true;\n        } else {\n          this.hideBadgeMod = false;\n        }\n      });\n    }\n\n    readMessage(myus, username, modMessage) {\n      console.log(this.router.parseUrl(this.router.url));\n      this.us.readMessage(myus, username, modMessage).subscribe();\n    }\n    /*\n      getFriendListEnorme() {\n        this.subscriptionIn = this.us.get_userMessage().subscribe((elem: any) => {\n          //console.log(elem.inPendingMessages)\n          this.badgeContentMsg = 0\n          this.messageInpending = elem.inPendingMessages\n          this.us.get_friendlist().subscribe((u) => {\n            this.friendlist = []\n            u.friendlist.forEach((element: { [x: string]: any; }) => {\n              let countMsg: number = 0\n              let msgHide: boolean = true\n              let col\n              this.us.get_friend(element['username']).subscribe((friend) => {\n                this.messageInpending.forEach((msg: any) => {\n                  if (msg.sender == element['username']) {\n                    countMsg++\n                  }\n                  if (msg.receiver == this.us.get_username() && msg.sender == element['username']) {\n                    this.badgeContentMsg++;\n                  }\n                })\n                //console.log(countMsg)\n                //console.log(this.onlineUser)\n                let sos = this.onlineUser.find((data: any) => { return data == element['username'] })\n                //console.log(\"Sos\")\n                //console.log(sos)\n                if (sos == element['username']) {\n                  col = \"yellow\"\n                } else {\n                  col = \"red\"\n                }\n                if (countMsg != 0) {\n                  msgHide = false\n                }\n                if (element['isBlocked']) {\n                  this.friendlist.push({ id: element['_id'], username: element['username'], isBlocked: \"bi bi-person-check-fill\", badgeNum: countMsg, badgeHidden: msgHide, color: col })\n                } else {\n                  this.friendlist.push({ id: element['_id'], username: element['username'], isBlocked: \"bi bi-person-x-fill\", badgeNum: countMsg, badgeHidden: msgHide, color: col })\n                }\n                if (this.badgeContentMsg == 0) {\n                  this.hideMatBadgeMsg = true\n                } else {\n                  this.hideMatBadgeMsg = false\n                }\n              })\n            });\n          })\n        })\n      }*/\n\n\n    notifyNewMsg() {\n      if (!this.sio.isNull()) {\n        //let g = this.router.parseUrl(this.router.url).root.children.primary.segments[0].path\n        //if (g) {\n        this.subscriptionMsg = this.sio.newMessage().subscribe(msg => {\n          console.log(\"Notify New Msg\");\n          console.log(msg);\n          let isAModMessage = JSON.parse(JSON.stringify(msg)).isAModMessage;\n          let rec = JSON.parse(JSON.stringify(msg)).receiver;\n          let send = JSON.parse(JSON.stringify(msg)).sender;\n          let inpend = JSON.parse(JSON.stringify(msg)).inpending;\n\n          if (isAModMessage) {\n            let g = this.router.parseUrl(this.router.url).root.children.primary.segments[0].path;\n            let g1 = \"\";\n\n            if (this.router.parseUrl(this.router.url).root.children.primary.segments[1] != undefined) {\n              g1 = this.router.parseUrl(this.router.url).root.children.primary.segments[1].path;\n            } //console.log(\"NotifyNewMsg\")\n\n\n            console.log(g1);\n\n            if (\"mod-chat\" != g || g1 != send) {\n              //console.log(\"NotifyNewMsg\")\n              if (inpend) {\n                this.getInpendingMsgMod();\n              } //console.log(g)\n              //console.log(inpend)\n\n\n              this.modlist.forEach(element => {\n                if (inpend) {\n                  if (element['username'] == send) {\n                    element['badgeNum']++;\n                  }\n\n                  if (element['badgeNum'] != 0) {\n                    element['badgeHidden'] = false;\n                  } else {\n                    element['badgeHidden'] = true;\n                  }\n                }\n              });\n            }\n          } else {\n            let g = this.router.parseUrl(this.router.url).root.children.primary.segments[0].path;\n            let g1 = \"\";\n\n            if (this.router.parseUrl(this.router.url).root.children.primary.segments[1] != undefined) {\n              g1 = this.router.parseUrl(this.router.url).root.children.primary.segments[1].path;\n            } //console.log(\"NotifyNewMsg\")\n\n\n            console.log(g1);\n\n            if (\"friend-chat\" != g || g1 != send) {\n              //console.log(\"NotifyNewMsg\")\n              if (inpend) {\n                this.getInpendinMsg();\n              } //console.log(g)\n              //console.log(inpend)\n\n\n              this.friendlist.forEach(element => {\n                if (inpend) {\n                  if (element['username'] == send) {\n                    element['badgeNum']++;\n                  }\n\n                  if (element['badgeNum'] != 0) {\n                    element['badgeHidden'] = false;\n                  } else {\n                    element['badgeHidden'] = true;\n                  }\n                }\n              }); //this.getFriendlist()\n\n              /*\n              this.friendlist.forEach((element: { [x: string]: any; }) => {\n                let countMsg: number = 0\n                let msgHide: boolean = true\n                let col\n                this.us.get_friend(element['username']).subscribe((friend) => {\n                  this.messageInpending.forEach((msg: any) => {\n                    if (msg.sender == element['username']) {\n                      countMsg++\n                    }\n                    if (msg.receiver == this.us.get_username() && msg.sender == element['username']) {\n                      this.badgeContentMsg++;\n                    }\n                  })\n                  //console.log(countMsg)\n                  console.log(this.onlineUser)\n                  let sos = this.onlineUser.find((data: any) => { return data == element['username'] })\n                  console.log(\"Sos\")\n                  console.log(sos)\n                  if (sos == element['username']) {\n                    col = \"yellow\"\n                  } else {\n                    col = \"red\"\n                  }\n                  if (countMsg != 0) {\n                    msgHide = false\n                  }\n                  if (element['isBlocked']) {\n                    this.friendlist.push({ id: element['_id'], username: element['username'], isBlocked: \"bi bi-person-check-fill\", badgeNum: countMsg, badgeHidden: msgHide, color: col })\n                  } else {\n                    this.friendlist.push({ id: element['_id'], username: element['username'], isBlocked: \"bi bi-person-x-fill\", badgeNum: countMsg, badgeHidden: msgHide, color: col })\n                  }\n                  if (this.badgeContentMsg == 0) {\n                    this.hideMatBadgeMsg = true\n                  } else {\n                    this.hideMatBadgeMsg = false\n                  }\n                })\n              })*/\n              //})\n              //this.getFriendListEnorme()\n            }\n          }\n        }); // }\n      }\n    }\n\n    notifyOnline() {\n      if (!this.sio.isNull()) {\n        this.subscriptionMsg = this.sio.isOnline().subscribe(msg => {\n          this.getUsOnline();\n          let usern = JSON.parse(JSON.stringify(msg)).username;\n          let conn = JSON.parse(JSON.stringify(msg)).isConnected; //console.log(\"NotifyOnline\")\n          //console.log(this.onlineUser)\n\n          this.friendlist.forEach(element => {\n            //console.log(element['username'])\n            //console.log(usern)\n            if (element['username'] == usern) {\n              if (conn) {\n                console.log(\"ONLINE\");\n                this.app.toastCust(usern + \" è online.\"); //this.toastN(usern+\" è online.\")\n\n                element['color'] = \"#88D498\";\n              } else {\n                console.log(\"OFFFLINE\");\n                this.app.toastCust(usern + \" è offline.\"); //this.toastN(usern+\" è offline.\")\n\n                element['color'] = \"#A4A5AE\";\n              }\n            } //console.log(element['color'])\n\n          });\n          /*\n          this.us.get_friendlist().subscribe((elem) => {\n            \n            elem.friendlist.forEach((element: { [x: string]: any; }) => {\n              console.log(element['username'])\n              console.log(usern)\n              if(element['username'] == usern){\n                if(conn){\n                  element['color'] = \"yellow\"\n                  element['username'] = \"Gigio\"\n                }else{\n                  element['color'] = \"red\"\n                }\n              }\n              console.log(element['color'])\n            })*/\n\n          /*\n          let sis = elem.find((data: any) => { return data.username == msg })\n          console.log(\"uSERNAD\")\n          console.log(sis)\n          })*/\n        });\n      }\n    }\n\n    navigate(route) {\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n      this.router.onSameUrlNavigation = \"reload\";\n      this.router.navigate([route]);\n    }\n\n  }\n\n  SidebarComponent.ɵfac = function SidebarComponent_Factory(t) {\n    return new (t || SidebarComponent)(i0.ɵɵdirectiveInject(i1.AppComponent), i0.ɵɵdirectiveInject(i2.ToastService), i0.ɵɵdirectiveInject(i3.SocketioService), i0.ɵɵdirectiveInject(i4.UserHttpService), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n  };\n\n  SidebarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SidebarComponent,\n    selectors: [[\"app-sidebar\"]],\n    decls: 83,\n    vars: 14,\n    consts: [[1, \"myNav\", \"bg-dark\", \"text-white\"], [1, \"navbar\", \"navbar-dark\", \"text-white\", \"bg-dark\"], [1, \"container\"], [1, \"col-8\"], [\"id\", \"mainbtn\", 1, \"text-white\", \"border-0\", 3, \"click\"], [1, \"col-4\", \"nav\", \"justify-content-end\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#navbarToggleExternalContent\", 1, \"navbar-toggler\"], [1, \"navbar-toggler-icon\"], [\"id\", \"navbarToggleExternalContent\", 1, \"collapse\", \"show\", \"pt-0\"], [1, \"p-1\", \"pt-0\"], [1, \"nav\", \"nav-pills\", \"flex-column\", \"mb-auto\"], [1, \"nav-item\"], [1, \"nav-link\", \"text-white\", \"w-100\", \"text-start\", 3, \"click\"], [\"color\", \"primary\", 1, \"customIcon\", 3, \"ngStyle\"], [\"class\", \"nav-item\", 4, \"ngIf\"], [\"id\", \"modalNot\", \"data-bs-backdrop\", \"true\", \"data-bs-keyboard\", \"false\", \"tabindex\", \"-1\", \"aria-labelledby\", \"modalReqLabel\", \"aria-hidden\", \"false\", 1, \"modal\", \"fade\", \"text-black\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"modalReqLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"modal-body\"], [1, \"list-group\"], [\"class\", \"list-group-item d-flex justify-content-between align-items-center\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\"], [\"id\", \"modalMod\", \"data-bs-backdrop\", \"true\", \"data-bs-keyboard\", \"false\", \"tabindex\", \"-1\", \"aria-labelledby\", \"modalReqLabel\", \"aria-hidden\", \"false\", 1, \"modal\", \"fade\", \"text-black\"], [\"class\", \"dropdown ms-3 profileIcon mb-3\", 4, \"ngIf\"], [\"class\", \"btn btn-primary\", \"id\", \"friendList\", \"type\", \"button\", \"data-bs-toggle\", \"offcanvas\", \"data-bs-target\", \"#friendListCanvas\", \"aria-controls\", \"friendListCanvas\", \"width\", \"32\", \"height\", \"32\", 3, \"click\", 4, \"ngIf\"], [\"data-bs-backdrop\", \"true\", \"data-bs-scroll\", \"true\", \"id\", \"friendListCanvas\", \"aria-labelledby\", \"offcanvasRightLabel\", 1, \"offcanvas\", \"offcanvas-end\", \"text-black\"], [1, \"offcanvas-header\"], [\"id\", \"offcanvasRightLabel\"], [\"type\", \"button\", \"data-bs-dismiss\", \"offcanvas\", \"aria-label\", \"Close\", 1, \"btn-close\", \"text-reset\"], [1, \"offcanvas-body\"], [\"type\", \"button\", \"id\", \"reqButton\", \"data-bs-toggle\", \"modal\", \"data-bs-target\", \"#modalReq\", 1, \"btn\", \"btn-primary\", \"mx-auto\", 3, \"click\"], [\"id\", \"modalReq\", \"data-bs-backdrop\", \"false\", \"data-bs-keyboard\", \"false\", \"tabindex\", \"-1\", \"aria-labelledby\", \"modalReqLabel\", \"aria-hidden\", \"false\", 1, \"modal\", \"fade\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"form-floating\"], [\"type\", \"text\", \"id\", \"usernameFriend\", \"placeholder\", \"usernameAdd\", \"required\", \"\", 1, \"form-control\", 3, \"value\"], [\"usernameAdd\", \"\"], [\"id\", \"userList\", 1, \"list-group\"], [\"class\", \"list-group-item list-group-item-action list-group-item-info d-flex justify-content-between align-items-center\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"usernameFriend\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"id\", \"notification\", \"data-bs-toggle\", \"modal\", \"data-bs-target\", \"#modalNot\", 1, \"nav-link\", \"text-white\", \"w-100\", \"text-start\", 3, \"click\"], [\"color\", \"primary\", \"matBadgeColor\", \"accent\", \"matBadgePosition\", \"above before\", \"matBadgeOverlap\", \"true\", \"matBadgeSize\", \"medium\", 1, \"customIcon\", 3, \"matBadge\", \"matBadgeHidden\", \"ngStyle\"], [\"mat-raised-button\", \"\"], [\"id\", \"notification\", \"data-bs-toggle\", \"modal\", \"data-bs-target\", \"#modalMod\", 1, \"nav-link\", \"text-white\", \"w-100\", \"text-start\", 2, \"text-overflow\", \"ellipsis\", 3, \"click\"], [\"id\", \"allUs\", 1, \"nav-link\", \"text-white\", \"w-100\", \"text-start\", 3, \"click\"], [1, \"list-group-item\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"align-items-right\"], [\"type\", \"button\", \"class\", \"friendListBtn\", \"data-bs-dismiss\", \"modal\", \"id\", \"btnBlock\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"friendListBtn\", \"data-bs-dismiss\", \"modal\", \"id\", \"btnDel\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"id\", \"btnBlock\", 1, \"friendListBtn\", 3, \"click\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"id\", \"btnDel\", 1, \"friendListBtn\", 3, \"click\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"friendListBtn\", \"mr-6\", 3, \"click\"], [\"matBadgeColor\", \"accent\", \"matBadgeSize\", \"small\", \"matBadgePosition\", \"above after\", \"matBadgeOverlap\", \"true\", 3, \"matBadge\", \"matBadgeHidden\", \"ngStyle\"], [1, \"dropdown\", \"ms-3\", \"profileIcon\", \"mb-3\"], [\"href\", \"#\", \"id\", \"dropdownUser1\", \"data-bs-toggle\", \"dropdown\", 1, \"align-items-center\", \"text-white\", \"text-decoration-none\", \"dropdown-toggle\"], [\"alt\", \"\", \"width\", \"32\", \"height\", \"32\", \"class\", \"rounded-circle me-2\", 3, \"src\", 4, \"ngIf\"], [1, \"dropdown-menu\", \"dropdown-menu-dark\", \"text-small\", \"shadow\"], [1, \"dropdown-item\", 3, \"click\"], [3, \"ngStyle\"], [1, \"dropdown-divider\"], [\"alt\", \"\", \"width\", \"32\", \"height\", \"32\", 1, \"rounded-circle\", \"me-2\", 3, \"src\"], [\"id\", \"friendList\", \"type\", \"button\", \"data-bs-toggle\", \"offcanvas\", \"data-bs-target\", \"#friendListCanvas\", \"aria-controls\", \"friendListCanvas\", \"width\", \"32\", \"height\", \"32\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"color\", \"primary\", \"matBadgeColor\", \"accent\", \"matBadgePosition\", \"above after\", \"matBadgeOverlap\", \"true\", 3, \"matBadge\", \"matBadgeHidden\", \"ngStyle\"], [\"type\", \"button\", \"id\", \"btnDel\", 1, \"friendListBtn\", \"mr-2\", 3, \"click\"], [\"type\", \"button\", \"data-bs-dismiss\", \"offcanvas\", 1, \"friendListBtn\", \"mr-6\", 3, \"click\"], [\"type\", \"button\", \"data-bs-dismiss\", \"offcanvas\", 1, \"friendListBtn\", \"mr-2\", 3, \"click\"], [\"type\", \"button\", \"id\", \"btnBlock\", 1, \"friendListBtn\", 3, \"click\"], [1, \"on-off\", \"position-absolute\", \"translate-middle\", \"border\", \"border-light\", \"rounded-circle\", 3, \"ngStyle\"], [1, \"visually-hidden\"], [1, \"list-group-item\", \"list-group-item-action\", \"list-group-item-info\", \"d-flex\", \"justify-content-between\", \"align-items-center\", 3, \"click\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"]],\n    template: function SidebarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r55 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"nav\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_4_listener() {\n          return ctx.navigate(\"home\");\n        });\n        i0.ɵɵtext(5, \"Forza Quattro\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵelement(8, \"span\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelementStart(10, \"div\", 9);\n        i0.ɵɵelement(11, \"hr\");\n        i0.ɵɵelementStart(12, \"ul\", 10);\n        i0.ɵɵelementStart(13, \"li\", 11);\n        i0.ɵɵelementStart(14, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_14_listener() {\n          return ctx.navigate(\"home\");\n        });\n        i0.ɵɵelementStart(15, \"mat-icon\", 13);\n        i0.ɵɵtext(16, \"home\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(17, \" Home \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, SidebarComponent_li_18_Template, 6, 4, \"li\", 14);\n        i0.ɵɵtemplate(19, SidebarComponent_li_19_Template, 6, 4, \"li\", 14);\n        i0.ɵɵtemplate(20, SidebarComponent_li_20_Template, 5, 2, \"li\", 14);\n        i0.ɵɵtemplate(21, SidebarComponent_li_21_Template, 6, 4, \"li\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"hr\");\n        i0.ɵɵelementStart(23, \"div\", 15);\n        i0.ɵɵelementStart(24, \"div\", 16);\n        i0.ɵɵelementStart(25, \"div\", 17);\n        i0.ɵɵelementStart(26, \"div\", 18);\n        i0.ɵɵelementStart(27, \"h5\", 19);\n        i0.ɵɵtext(28, \"NOTIFICATION\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"button\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 21);\n        i0.ɵɵelementStart(31, \"div\", 22);\n        i0.ɵɵtemplate(32, SidebarComponent_li_32_Template, 7, 5, \"li\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"div\", 24);\n        i0.ɵɵelementStart(34, \"button\", 25);\n        i0.ɵɵtext(35, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"div\", 26);\n        i0.ɵɵelementStart(37, \"div\", 16);\n        i0.ɵɵelementStart(38, \"div\", 17);\n        i0.ɵɵelementStart(39, \"div\", 18);\n        i0.ɵɵelementStart(40, \"h5\", 19);\n        i0.ɵɵtext(41, \"NOTIFICATION\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(42, \"button\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"div\", 21);\n        i0.ɵɵelementStart(44, \"div\", 22);\n        i0.ɵɵtemplate(45, SidebarComponent_li_45_Template, 7, 5, \"li\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"div\", 24);\n        i0.ɵɵelementStart(47, \"button\", 25);\n        i0.ɵɵtext(48, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(49, SidebarComponent_div_49_Template, 18, 4, \"div\", 27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(50, SidebarComponent_button_50_Template, 4, 4, \"button\", 28);\n        i0.ɵɵelementStart(51, \"div\", 29);\n        i0.ɵɵelementStart(52, \"div\", 30);\n        i0.ɵɵelementStart(53, \"h5\", 31);\n        i0.ɵɵtext(54, \"FriendList\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(55, \"button\", 32);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"div\", 33);\n        i0.ɵɵelementStart(57, \"div\", 22);\n        i0.ɵɵtemplate(58, SidebarComponent_li_58_Template, 21, 11, \"li\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(59, \"button\", 34);\n        i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_59_listener() {\n          return ctx.get_userlist();\n        });\n        i0.ɵɵtext(60, \" ADD FRIEND \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(61, \"div\", 35);\n        i0.ɵɵelementStart(62, \"div\", 16);\n        i0.ɵɵelementStart(63, \"div\", 17);\n        i0.ɵɵelementStart(64, \"div\", 18);\n        i0.ɵɵelementStart(65, \"h5\", 19);\n        i0.ɵɵtext(66, \"ADD A NEW FRIEND\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(67, \"button\", 36);\n        i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_67_listener() {\n          return ctx.setErr();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"div\", 21);\n        i0.ɵɵelementStart(69, \"div\", 37);\n        i0.ɵɵelement(70, \"input\", 38, 39);\n        i0.ɵɵelement(72, \"br\");\n        i0.ɵɵelementStart(73, \"div\", 40);\n        i0.ɵɵtemplate(74, SidebarComponent_li_74_Template, 2, 1, \"li\", 41);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"label\", 42);\n        i0.ɵɵtext(76, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(77, SidebarComponent_div_77_Template, 2, 1, \"div\", 43);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(78, \"div\", 24);\n        i0.ɵɵelementStart(79, \"button\", 44);\n        i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_79_listener() {\n          return ctx.setErr();\n        });\n        i0.ɵɵtext(80, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(81, \"button\", 45);\n        i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_81_listener() {\n          i0.ɵɵrestoreView(_r55);\n\n          const _r9 = i0.ɵɵreference(71);\n\n          return ctx.addFriend(_r9.value, \"friendRequest\");\n        })(\"click\", function SidebarComponent_Template_button_click_81_listener() {\n          i0.ɵɵrestoreView(_r55);\n\n          const _r9 = i0.ɵɵreference(71);\n\n          return _r9.value = \"\";\n        });\n        i0.ɵɵtext(82, \"Send the request\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(13, _c0));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.username);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.username);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.has_moderator_role());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.has_moderator_role());\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.notification);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.modlist);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.username);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.username);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.friendlist);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"value\", ctx.friendUsername);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.list);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errMsg);\n      }\n    },\n    directives: [i6.NgbNavbar, i7.MatIcon, i8.NgStyle, i8.NgIf, i8.NgForOf, i9.MatBadge],\n    styles: [\"@media screen and (min-width: 600px){.myNav[_ngcontent-%COMP%]{height:100%}.navbar-toggler[_ngcontent-%COMP%]{display:none}.profileIcon[_ngcontent-%COMP%]{position:fixed;right:0;bottom:0;left:0}#navbarToggleExternalContent[_ngcontent-%COMP%]{display:block}.modal[_ngcontent-%COMP%]{-webkit-backdrop-filter:static;backdrop-filter:static}}@media screen and (max-width: 450px){.friendListBtn[_ngcontent-%COMP%]{background:#212529!important}#btnDel[_ngcontent-%COMP%]{background:#212529!important}#btnBlock[_ngcontent-%COMP%]{background:#212529!important}}.list-group-item-info[_ngcontent-%COMP%]{color:#212529;background-color:#fff}.list-group[_ngcontent-%COMP%]{overflow-y:auto;height:65vh;max-height:75vh;backdrop-filter:blur(16px) saturate(180%);-webkit-backdrop-filter:blur(16px) saturate(180%);background-color:#ffffffbf!important;border-radius:6px;border:1px solid rgba(209,213,219,.3)}.on-off[_ngcontent-%COMP%]{position:absolute;top:16%!important;left:2.5%!important;padding:.4rem}#userList[_ngcontent-%COMP%]{overflow-y:scroll;height:45vh;max-height:55vh;backdrop-filter:blur(16px) saturate(180%);-webkit-backdrop-filter:blur(16px) saturate(180%);background-color:#ffffffbf!important;border-radius:6px;border:1px solid rgba(209,213,219,.3)}#friendList[_ngcontent-%COMP%]{position:fixed;bottom:2%;right:2%;z-index:100}.offcanvas[_ngcontent-%COMP%]{backdrop-filter:blur(16px) saturate(180%);-webkit-backdrop-filter:blur(16px) saturate(180%);background-color:#ffffffbf;border-radius:6px;border:1px solid rgba(209,213,219,.3)}.mat-icon[_ngcontent-%COMP%]{vertical-align:sub;font-size:25px}.customIcon[_ngcontent-%COMP%]{text-align-last:right;vertical-align:sub;font-size:19px}.friendListBtn[_ngcontent-%COMP%]{outline:none;cursor:pointer;border:none;padding:.5vh .6vw;margin:0 0 0 .4rem;font-family:inherit;font-size:inherit;position:relative;display:inline-block;letter-spacing:.05rem;font-weight:700;font-size:17px;border-radius:300px;overflow:hidden;background:#59C9A5;color:#f8f8ff}.friendListBtn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]   .mat-badge-content[_ngcontent-%COMP%]{transform:translate(-4px,16px)!important}#btnDel[_ngcontent-%COMP%]{background:red}#btnBlock[_ngcontent-%COMP%]{background:#E59500}#reqButton[_ngcontent-%COMP%]{position:relative;left:34%;right:34%;top:3%}.friendListBtn[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{position:relative;z-index:10;transition:color .4s}.friendListBtn[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{color:#fff}.friendListBtn[_ngcontent-%COMP%]:before, .friendListBtn[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;width:10vw;height:10vh;z-index:0}.friendListBtn[_ngcontent-%COMP%]:before{content:\\\"\\\";background:#212529;width:12vw;left:-10%;transform:skew(30deg);transition:transform .4s cubic-bezier(.3,1,.8,1)}.friendListBtn[_ngcontent-%COMP%]:hover:before{transform:translate(100%)}.dot[_ngcontent-%COMP%]{height:25px;width:25px;background-color:#bbb;border-radius:50%;display:inline-block}.nav-link[_ngcontent-%COMP%]:hover, .dropdown-item[_ngcontent-%COMP%]:hover{background-color:#1e5a7a}#mainbtn[_ngcontent-%COMP%]{background-color:var(--bs-dark)}\"]\n  });\n  return SidebarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}