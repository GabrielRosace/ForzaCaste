{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/toast.service\";\nimport * as i2 from \"../socketio.service\";\nimport * as i3 from \"../user-http.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\n\nfunction ModChatComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelement(1, \"img\", 16);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 17);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", message_r3.imgUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r3.text);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", message_r3.from.toUpperCase(), \" - \", message_r3.time, \"\");\n  }\n}\n\nfunction ModChatComponent_div_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelement(1, \"img\", 19);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 20);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", message_r3.imgUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r3.text);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", message_r3.from.toUpperCase(), \" - \", message_r3.time, \"\");\n  }\n}\n\nfunction ModChatComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, ModChatComponent_div_8_div_1_Template, 6, 4, \"div\", 13);\n    i0.ɵɵtemplate(2, ModChatComponent_div_8_div_2_Template, 6, 4, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", message_r3.from == \"me\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", message_r3.from != \"me\");\n  }\n}\n\nexport let ModChatComponent = /*#__PURE__*/(() => {\n  class ModChatComponent {\n    constructor(toast, sio, us, router, activeRoute, cdRef) {\n      this.toast = toast;\n      this.sio = sio;\n      this.us = us;\n      this.router = router;\n      this.activeRoute = activeRoute;\n      this.cdRef = cdRef;\n      this.singleChat = [];\n      this.username = \"\"; //TODO tipo user\n\n      this.avatarImgURL = \"\";\n      this.friend = \"\";\n      this.tok = \"\";\n      this.hideBadgeMod = false;\n      this.badgeContMod = 0;\n      this.role = \"\";\n      this.type = \"\";\n    }\n\n    ngOnInit() {\n      this.tok = this.us.get_token();\n      console.log(\"Sono ngInit Friend\");\n\n      if (!this.tok) {\n        // TODO aggiungi un messaggio, magari con una funzione nel servizio per non replicare codice\n        this.router.navigate(['/']);\n      } else {\n        this.username = this.us.get_username();\n        this.avatarImgURL = this.us.get_avatarImgURL();\n        this.role = this.us.get_role();\n        this.friend = this.activeRoute.snapshot.params['user'];\n        this.readMessage(this.us.get_username(), this.activeRoute.snapshot.params['user']);\n        this.openChat(this.activeRoute.snapshot.params['user']);\n        this.notifyNewMsg();\n        console.log(this.router.parseUrl(this.router.url).root.children.primary.segments[0].path); //this.getNotification(false, true)\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.tok) {\n        this.subscriptionName.unsubscribe();\n        this.subscriptionMsg.unsubscribe();\n      }\n    }\n\n    ngAfterViewChecked() {\n      this.cdRef.detectChanges();\n    }\n\n    sendMessage(message) {\n      console.log(\"Mesg inviato\");\n      this.us.send_ModMsg(this.activeRoute.snapshot.params['user'], message).subscribe(data => {\n        let date = new Date();\n        this.singleChat.push({\n          imgUrl: this.us.get_avatarImgURL(),\n          from: \"me\",\n          text: message,\n          time: `${date.getUTCHours()}:${date.getMinutes()}:${date.getUTCSeconds()} - ${date.getUTCDate()}/${date.getUTCMonth() + 1}/${date.getFullYear()}`\n        });\n      });\n    }\n\n    openChat(username) {\n      this.subscriptionName = this.us.get_userMessage(true).subscribe(elem => {\n        console.log(\"OpenChat\");\n        this.messagelist = elem.allMessages;\n        this.messageInpending = elem.inPendingMessages;\n        console.log(this.messageInpending);\n        console.log(this.messagelist);\n        this.us.get_Otheruser(username).subscribe(user => {\n          this.messagelist.forEach(element => {\n            let date = new Date(element.timestamp);\n\n            if (element.sender == username) {\n              //date.getUTCDay().toString()+\"-\"+date.getUTCMonth().toString()+\"-\"+date.getFullYear().toString()+\" \"+date.getUTCHours().toString()+\":\"+date.getUTCMinutes().toString()\n              this.singleChat.push({\n                imgUrl: user.avatarImgURL,\n                from: user.username,\n                text: element.content,\n                time: `${date.getUTCHours()}:${date.getMinutes()}:${date.getUTCSeconds()} - ${date.getUTCDate()}/${date.getUTCMonth() + 1}/${date.getFullYear()}`\n              });\n            } else if (element.receiver == username) {\n              this.singleChat.push({\n                imgUrl: this.us.get_avatarImgURL(),\n                from: \"me\",\n                text: element.content,\n                time: `${date.getUTCHours()}:${date.getMinutes()}:${date.getUTCSeconds()} - ${date.getUTCDate()}/${date.getUTCMonth() + 1}/${date.getFullYear()}`\n              });\n            }\n          });\n        });\n        this.badgeContMod = 0; //console.log(\"MsgList: \")\n        //console.log(this.messageInpending)\n\n        this.messageInpending.forEach(element => {\n          if (element.receiver == this.us.get_username()) {\n            this.badgeContMod++;\n          }\n        });\n        console.log(\"badgeContent\");\n        console.log(this.badgeContMod);\n\n        if (this.badgeContMod == 0) {\n          this.hideBadgeMod = true;\n        }\n      });\n    }\n\n    readMessage(myus, username) {\n      this.us.readMessage(myus, username, true).subscribe(() => {\n        console.log(\"Read Message\");\n        this.us.update_badge(\"read mod-chat\");\n      });\n    }\n\n    getInpendinMsg(username) {\n      this.subscriptionName = this.us.get_userMessage(true).subscribe(elem => {\n        this.messageInpending = elem.inPendingMessages;\n        this.badgeContMod = 0;\n        this.us.get_Otheruser(username).subscribe(user => {\n          this.messageInpending.forEach(element => {\n            let date = new Date(element.timestamp);\n\n            if (element.sender == username) {\n              //date.getUTCDay().toString()+\"-\"+date.getUTCMonth().toString()+\"-\"+date.getFullYear().toString()+\" \"+date.getUTCHours().toString()+\":\"+date.getUTCMinutes().toString()\n              this.singleChat.push({\n                imgUrl: user.avatarImgURL,\n                from: user.username,\n                text: element.content,\n                time: `${date.getUTCHours()}:${date.getMinutes()}:${date.getUTCSeconds()} - ${date.getUTCDate()}/${date.getUTCMonth() + 1}/${date.getFullYear()}`\n              });\n            }\n          });\n          this.us.readMessage(this.us.get_username(), username, true).subscribe();\n        });\n      });\n    }\n\n    notifyNewMsg() {\n      if (!this.sio.isNull()) {\n        this.subscriptionMsg = this.sio.newMessage().subscribe(msg => {\n          this.getInpendinMsg(this.activeRoute.snapshot.params['user']);\n        });\n      }\n    }\n\n  }\n\n  ModChatComponent.ɵfac = function ModChatComponent_Factory(t) {\n    return new (t || ModChatComponent)(i0.ɵɵdirectiveInject(i1.ToastService), i0.ɵɵdirectiveInject(i2.SocketioService), i0.ɵɵdirectiveInject(i3.UserHttpService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  ModChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModChatComponent,\n    selectors: [[\"app-mod-chat\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[\"id\", \"main\", 1, \"card\", \"border-dark\", \"mb-0\", \"p-0\"], [1, \"card-body\", \"text-dark\"], [1, \"text-center\", \"fs-2\", \"fw-bold\"], [1, \"container\"], [1, \"mychat\"], [1, \"chatcontainer\", 3, \"scrollTop\"], [\"scrollMe\", \"\"], [\"class\", \"elements\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-inline\", 2, \"padding-left\", \"1vw\", \"padding-right\", \"1vw\", \"padding-top\", \"1vw\", 3, \"submit\"], [\"type\", \"text\", \"id\", \"inlineFormInputName2\", \"placeholder\", \"Write something\", 1, \"form-control\", \"mb-2\", \"mr-sm-2\"], [\"tosend\", \"\"], [\"type\", \"button\", 1, \"w-100\", \"btn\", \"btn-lg\", \"btn-primary\", 3, \"click\"], [1, \"elements\"], [\"class\", \"containerchat\", 4, \"ngIf\"], [\"class\", \"containerchat darker\", 4, \"ngIf\"], [1, \"containerchat\"], [\"alt\", \"\", \"width\", \"32\", \"height\", \"32\", 1, \"rounded-circle\", \"me-2\", 2, \"float\", \"left\", 3, \"src\"], [1, \"time-right\"], [1, \"containerchat\", \"darker\"], [\"alt\", \"\", \"width\", \"32\", \"height\", \"32\", 1, \"rounded-circle\", \"me-2\", 2, \"float\", \"right\", 3, \"src\"], [1, \"time-left\"]],\n    template: function ModChatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r8 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"p\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5, 6);\n        i0.ɵɵtemplate(8, ModChatComponent_div_8_Template, 3, 2, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"form\", 8);\n        i0.ɵɵlistener(\"submit\", function ModChatComponent_Template_form_submit_9_listener() {\n          i0.ɵɵrestoreView(_r8);\n\n          const _r2 = i0.ɵɵreference(11);\n\n          ctx.sendMessage(_r2.value);\n          return false;\n        });\n        i0.ɵɵelement(10, \"input\", 9, 10);\n        i0.ɵɵelementStart(12, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function ModChatComponent_Template_button_click_12_listener() {\n          i0.ɵɵrestoreView(_r8);\n\n          const _r2 = i0.ɵɵreference(11);\n\n          return ctx.sendMessage(_r2.value);\n        });\n        i0.ɵɵtext(13, \"Send\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Moderator chat with \", ctx.friend, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"scrollTop\", _r0.scrollHeight);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.singleChat);\n      }\n    },\n    directives: [i5.NgForOf, i5.NgIf],\n    styles: [\"#main[_ngcontent-%COMP%]{display:flex;justify-content:center;height:100vh}.chatcontainer[_ngcontent-%COMP%]{overflow-y:scroll}.containerchat[_ngcontent-%COMP%]{border:.5px solid #dedede;background-color:#b8cfe6;border-radius:5px;padding:10px;margin:10px 0}.darker[_ngcontent-%COMP%]{border-color:#ccc;background-color:#acd8bc}.containerchat[_ngcontent-%COMP%]:after{content:\\\"\\\";clear:both;display:table}@media (orientation: landscape){.chatcontainer[_ngcontent-%COMP%]{display:block;max-width:100%;width:100%;max-height:65vh;height:65vh;overflow-y:scroll;background-color:#f5f5f5;border-style:solid;border-radius:10px;border-width:1pt}.mychat[_ngcontent-%COMP%]{width:100%;max-width:100%;max-height:70vh}.container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{float:left;max-width:7vh;max-height:7vh;width:7vh;height:7vh;background-size:contain;margin-right:20px;border-radius:50%}.container[_ngcontent-%COMP%]   img.right[_ngcontent-%COMP%]{float:right;margin-left:20px;margin-right:0}}@media (orientation: portrait){.chatcontainer[_ngcontent-%COMP%]{max-width:100%;width:100%;max-height:65vh;height:65vh;overflow-y:scroll;background-color:#f5f5f5;border-style:solid;border-radius:10px;border-width:1pt}.mychat[_ngcontent-%COMP%]{width:100%;max-width:100%;max-height:70vw}.container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:7vw;max-height:7vw;width:7vw;height:7vw;background-size:contain;margin-right:20px;border-radius:50%}.container[_ngcontent-%COMP%]   img.right[_ngcontent-%COMP%]{float:right;margin-left:20px;margin-right:0}}.time-right[_ngcontent-%COMP%]{float:right;color:#aaa}.time-left[_ngcontent-%COMP%]{float:left;color:#999}\"]\n  });\n  return ModChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}