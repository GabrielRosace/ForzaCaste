{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user-http.service\";\nexport let SocketioService = /*#__PURE__*/(() => {\n  class SocketioService {\n    constructor(us) {\n      this.us = us;\n      this.game = [];\n      this.turn = 0;\n      this.switched = false;\n    }\n\n    connect() {\n      this.socket = io(`${this.us.url}?jwt=${this.us.get_token()}`, {\n        withCredentials: true,\n        extraHeaders: {\n          \"enableCORS\": \"true\"\n        }\n      });\n    }\n\n    getGame() {\n      return this.game;\n    }\n\n    setGame(game) {\n      this.game = game;\n    }\n\n    getP1() {\n      return this.p1;\n    }\n\n    setP1(p1) {\n      this.p1 = p1;\n    }\n\n    getP2() {\n      return this.p2;\n    }\n\n    setP2(p2) {\n      this.p2 = p2;\n    }\n\n    gameChat() {\n      console.log(\" Created gameChat\");\n      return new Observable(observer => {\n        this.socket.on('gameChat', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    result() {\n      console.log(\" Created result\");\n      return new Observable(observer => {\n        this.socket.on('result', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    gameStatus() {\n      console.log(\" Created gameStatus\");\n      return new Observable(observer => {\n        this.socket.on('gameStatus', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    move() {\n      console.log(\" Created move\");\n      return new Observable(observer => {\n        this.socket.on('move', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n    /*TO REMOVE\n       makemove(col:String){\n      console.log(\" Created makemove\")\n      console.log(this.us.get_username())\n      this.socket.emit('move',{username:this.us.get_username(),move:col})\n    }*/\n\n\n    gameReady() {\n      console.log(\"Created gameReady\");\n      return new Observable(observer => {\n        this.socket.on('gameReady', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    creatematchroomemit() {\n      console.log(\"createMatchRoom emit\");\n      this.socket.emit('createMatchRoom', {\n        username: this.us.get_username()\n      });\n    }\n\n    enterGameWatchMode() {\n      console.log(\"Created enterGameWatchMode\");\n      return new Observable(observer => {\n        this.socket.on('enterGameWatchMode', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n    /*\n      addFriend(receiver: String, type: String): void{\n        console.log(\"Add friend\", this.us.get_username())\n        let clientMessage = JSON.stringify({error : false, username: this.us.get_username(), receiver: receiver, type: type})\n        console.log(clientMessage)\n        this.socket.emit('notification',JSON.parse(clientMessage))\n      } */\n\n\n    request() {\n      return new Observable(observer => {\n        this.socket.on('newNotification', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    friendRequYN() {\n      return new Observable(observer => {\n        this.socket.on('request', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    gameRequest() {\n      return new Observable(observer => {\n        this.socket.on('gameRequest', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n    /*\n    friendReqAccepted(){\n      return new Observable<string>(observer =>{\n        this.socket.on('acceptedRequest', msg => {\n          observer.next(msg);\n        });\n      })\n    }*/\n\n\n    newMessage() {\n      return new Observable(observer => {\n        this.socket.on('message', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    friendDeleted() {\n      return new Observable(observer => {\n        this.socket.on('friendDeleted', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    isOnline() {\n      return new Observable(observer => {\n        this.socket.on('online', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    beingBlocked() {\n      return new Observable(observer => {\n        this.socket.on('friendBlocked', msg => {\n          observer.next(msg);\n        });\n      });\n    }\n\n    isNull() {\n      return this.socket == null;\n    }\n\n    disconnect() {\n      this.socket.close();\n    }\n\n  }\n\n  SocketioService.ɵfac = function SocketioService_Factory(t) {\n    return new (t || SocketioService)(i0.ɵɵinject(i1.UserHttpService));\n  };\n\n  SocketioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketioService,\n    factory: SocketioService.ɵfac,\n    providedIn: 'root'\n  });\n  return SocketioService;\n})();","map":null,"metadata":{},"sourceType":"module"}